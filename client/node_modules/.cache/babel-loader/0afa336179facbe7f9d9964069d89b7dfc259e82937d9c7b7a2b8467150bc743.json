{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Desktop\\\\AI create CV\\\\client\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport api from \"../config/api\";\nimport Cookies from \"js-cookie\";\nimport { config } from \"../config/environment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n  const checkAuthStatus = async () => {\n    try {\n      var _response$data;\n      // Always try to fetch current user from backend. Backend will use httpOnly cookie\n      // (set after Google OAuth) or token-based cookie to identify the user.\n      const response = await api.get(\"/auth/me\");\n      if (response !== null && response !== void 0 && (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.user) {\n        setUser(response.data.user);\n      } else {\n        // ensure user cleared if not authenticated\n        setUser(null);\n      }\n    } catch (error) {\n      console.error(\"Auth check failed:\", error);\n      Cookies.remove(\"token\");\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      const response = await api.post(\"/auth/login\", {\n        email,\n        password\n      });\n      const {\n        user,\n        token\n      } = response.data;\n      Cookies.set(\"token\", token, {\n        expires: 7\n      });\n      localStorage.setItem(\"token\", token);\n      setUser(user);\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        success: false,\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Login failed\"\n      };\n    }\n  };\n  const register = async userData => {\n    try {\n      const response = await api.post(\"/auth/register\", userData);\n      const {\n        user,\n        token\n      } = response.data;\n      Cookies.set(\"token\", token, {\n        expires: 7\n      });\n      localStorage.setItem(\"token\", token);\n      setUser(user);\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Registration failed\"\n      };\n    }\n  };\n  const googleLogin = () => {\n    // Redirect the browser to the backend Google OAuth start URL\n    const base = config && config.API_BASE_URL || window.location.origin;\n    const url = base.replace(/\\/$/, \"\") + \"/auth/google\";\n    window.location.href = url;\n  };\n  const logout = async () => {\n    try {\n      await api.get(\"/auth/logout\");\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n    } finally {\n      Cookies.remove(\"token\");\n      localStorage.removeItem(\"token\");\n      setUser(null);\n    }\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    googleLogin,\n    logout,\n    isAuthenticated: !!user,\n    isAdmin: (user === null || user === void 0 ? void 0 : user.role) === \"admin\"\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","Cookies","config","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","checkAuthStatus","_response$data","response","get","data","error","console","remove","login","email","password","post","token","set","expires","localStorage","setItem","success","_error$response","_error$response$data","message","register","userData","_error$response2","_error$response2$data","googleLogin","base","API_BASE_URL","window","location","origin","url","replace","href","logout","removeItem","value","isAuthenticated","isAdmin","role","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ADMIN/Desktop/AI create CV/client/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport api from \"../config/api\";\r\nimport Cookies from \"js-cookie\";\r\nimport { config } from \"../config/environment\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  const checkAuthStatus = async () => {\r\n    try {\r\n      // Always try to fetch current user from backend. Backend will use httpOnly cookie\r\n      // (set after Google OAuth) or token-based cookie to identify the user.\r\n      const response = await api.get(\"/auth/me\");\r\n      if (response?.data?.user) {\r\n        setUser(response.data.user);\r\n      } else {\r\n        // ensure user cleared if not authenticated\r\n        setUser(null);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Auth check failed:\", error);\r\n      Cookies.remove(\"token\");\r\n      setUser(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await api.post(\"/auth/login\", { email, password });\r\n      const { user, token } = response.data;\r\n\r\n      Cookies.set(\"token\", token, { expires: 7 });\r\n      localStorage.setItem(\"token\", token);\r\n      setUser(user);\r\n\r\n      return { success: true, user };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: error.response?.data?.message || \"Login failed\",\r\n      };\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      const response = await api.post(\"/auth/register\", userData);\r\n      const { user, token } = response.data;\r\n\r\n      Cookies.set(\"token\", token, { expires: 7 });\r\n      localStorage.setItem(\"token\", token);\r\n      setUser(user);\r\n\r\n      return { success: true, user };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: error.response?.data?.message || \"Registration failed\",\r\n      };\r\n    }\r\n  };\r\n\r\n  const googleLogin = () => {\r\n    // Redirect the browser to the backend Google OAuth start URL\r\n    const base = (config && config.API_BASE_URL) || window.location.origin;\r\n    const url = base.replace(/\\/$/, \"\") + \"/auth/google\";\r\n    window.location.href = url;\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await api.get(\"/auth/logout\");\r\n    } catch (error) {\r\n      console.error(\"Logout error:\", error);\r\n    } finally {\r\n      Cookies.remove(\"token\");\r\n      localStorage.removeItem(\"token\");\r\n      setUser(null);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    login,\r\n    register,\r\n    googleLogin,\r\n    logout,\r\n    isAuthenticated: !!user,\r\n    isAdmin: user?.role === \"admin\",\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}