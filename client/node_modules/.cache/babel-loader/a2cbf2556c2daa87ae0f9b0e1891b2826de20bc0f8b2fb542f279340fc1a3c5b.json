{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Desktop\\\\AI create CV\\\\client\\\\src\\\\components\\\\APIConnectionStatus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Chip, Typography } from '@mui/material';\nimport { testAPIConnection } from '../utils/apiTest';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst APIConnectionStatus = () => {\n  _s();\n  const [status, setStatus] = useState('checking');\n  const [message, setMessage] = useState('Checking API connection...');\n  useEffect(() => {\n    const checkConnection = async () => {\n      try {\n        const result = await testAPIConnection();\n        if (result.success) {\n          setStatus('connected');\n          setMessage('API Connected');\n        } else {\n          setStatus('disconnected');\n          setMessage('API Disconnected');\n        }\n      } catch (error) {\n        setStatus('error');\n        setMessage('Connection Error');\n      }\n    };\n\n    // Check connection after 3 seconds\n    const timer = setTimeout(checkConnection, 3000);\n    return () => clearTimeout(timer);\n  }, []);\n  const getStatusColor = () => {\n    switch (status) {\n      case 'connected':\n        return 'success';\n      case 'disconnected':\n        return 'warning';\n      case 'error':\n        return 'error';\n      default:\n        return 'default';\n    }\n  };\n\n  // Only show in development\n  if (process.env.NODE_ENV !== 'development') {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      position: 'fixed',\n      top: 10,\n      right: 10,\n      zIndex: 9999\n    },\n    children: /*#__PURE__*/_jsxDEV(Chip, {\n      label: message,\n      color: getStatusColor(),\n      size: \"small\",\n      variant: \"outlined\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(APIConnectionStatus, \"xa2RzO1LXmTtSkdv2+78C7qhJnc=\");\n_c = APIConnectionStatus;\nexport default APIConnectionStatus;\nvar _c;\n$RefreshReg$(_c, \"APIConnectionStatus\");","map":{"version":3,"names":["React","useState","useEffect","Box","Chip","Typography","testAPIConnection","jsxDEV","_jsxDEV","APIConnectionStatus","_s","status","setStatus","message","setMessage","checkConnection","result","success","error","timer","setTimeout","clearTimeout","getStatusColor","process","env","NODE_ENV","sx","position","top","right","zIndex","children","label","color","size","variant","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ADMIN/Desktop/AI create CV/client/src/components/APIConnectionStatus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Box, Chip, Typography } from '@mui/material';\r\nimport { testAPIConnection } from '../utils/apiTest';\r\n\r\nconst APIConnectionStatus = () => {\r\n  const [status, setStatus] = useState('checking');\r\n  const [message, setMessage] = useState('Checking API connection...');\r\n\r\n  useEffect(() => {\r\n    const checkConnection = async () => {\r\n      try {\r\n        const result = await testAPIConnection();\r\n        if (result.success) {\r\n          setStatus('connected');\r\n          setMessage('API Connected');\r\n        } else {\r\n          setStatus('disconnected');\r\n          setMessage('API Disconnected');\r\n        }\r\n      } catch (error) {\r\n        setStatus('error');\r\n        setMessage('Connection Error');\r\n      }\r\n    };\r\n\r\n    // Check connection after 3 seconds\r\n    const timer = setTimeout(checkConnection, 3000);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  const getStatusColor = () => {\r\n    switch (status) {\r\n      case 'connected':\r\n        return 'success';\r\n      case 'disconnected':\r\n        return 'warning';\r\n      case 'error':\r\n        return 'error';\r\n      default:\r\n        return 'default';\r\n    }\r\n  };\r\n\r\n  // Only show in development\r\n  if (process.env.NODE_ENV !== 'development') {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ position: 'fixed', top: 10, right: 10, zIndex: 9999 }}>\r\n      <Chip\r\n        label={message}\r\n        color={getStatusColor()}\r\n        size=\"small\"\r\n        variant=\"outlined\"\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default APIConnectionStatus;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,GAAG,EAAEC,IAAI,EAAEC,UAAU,QAAQ,eAAe;AACrD,SAASC,iBAAiB,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,UAAU,CAAC;EAChD,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,4BAA4B,CAAC;EAEpEC,SAAS,CAAC,MAAM;IACd,MAAMa,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMC,MAAM,GAAG,MAAMV,iBAAiB,CAAC,CAAC;QACxC,IAAIU,MAAM,CAACC,OAAO,EAAE;UAClBL,SAAS,CAAC,WAAW,CAAC;UACtBE,UAAU,CAAC,eAAe,CAAC;QAC7B,CAAC,MAAM;UACLF,SAAS,CAAC,cAAc,CAAC;UACzBE,UAAU,CAAC,kBAAkB,CAAC;QAChC;MACF,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdN,SAAS,CAAC,OAAO,CAAC;QAClBE,UAAU,CAAC,kBAAkB,CAAC;MAChC;IACF,CAAC;;IAED;IACA,MAAMK,KAAK,GAAGC,UAAU,CAACL,eAAe,EAAE,IAAI,CAAC;IAC/C,OAAO,MAAMM,YAAY,CAACF,KAAK,CAAC;EAClC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,cAAc,GAAGA,CAAA,KAAM;IAC3B,QAAQX,MAAM;MACZ,KAAK,WAAW;QACd,OAAO,SAAS;MAClB,KAAK,cAAc;QACjB,OAAO,SAAS;MAClB,KAAK,OAAO;QACV,OAAO,OAAO;MAChB;QACE,OAAO,SAAS;IACpB;EACF,CAAC;;EAED;EACA,IAAIY,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IAC1C,OAAO,IAAI;EACb;EAEA,oBACEjB,OAAA,CAACL,GAAG;IAACuB,EAAE,EAAE;MAAEC,QAAQ,EAAE,OAAO;MAAEC,GAAG,EAAE,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,MAAM,EAAE;IAAK,CAAE;IAAAC,QAAA,eAC/DvB,OAAA,CAACJ,IAAI;MACH4B,KAAK,EAAEnB,OAAQ;MACfoB,KAAK,EAAEX,cAAc,CAAC,CAAE;MACxBY,IAAI,EAAC,OAAO;MACZC,OAAO,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC7B,EAAA,CAtDID,mBAAmB;AAAA+B,EAAA,GAAnB/B,mBAAmB;AAwDzB,eAAeA,mBAAmB;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}